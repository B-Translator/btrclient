<?php
/**
 * @file
 * Module file for btrClient.
 */

require_once dirname(__FILE__) . '/includes/utils.inc';
require_once dirname(__FILE__) . '/btrClient.menu.inc';
require_once dirname(__FILE__) . '/btrClient.blocks.inc';
require_once dirname(__FILE__) . '/btrClient.services.inc';

/**
 * Implements hook_theme().
 */
function btrClient_theme($existing, $type, $theme, $path) {
  return array(
    'btrClient_filter_form_element' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_translation' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_actions' => array(
      'render element' => 'element',
    ),
    'btrClient_in_context' => array(
      'variables' => array('source' => NULL),
    ),
    'btrClient_translate_radio' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_source' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_translation_list' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_flush_caches().
 *
 * Add cache table names to the list of cache tables
 * that will be cleared by the Clear button on the Performance page
 * or whenever drupal_flush_all_caches is invoked.
 * Returns an array of cache table names.
 */
function btrClient_flush_caches() {
  return array('cache_btrClient');
}

/**
 * Implements hook_init().
 */
function btrClient_init() {
  if (arg(0) == 'translations') {
    drupal_add_css(drupal_get_path('module', 'btrClient') . '/btrClient.css');
  }

  // Check if language is RTL.
  $languages = btrClient_get_languages();
  $lng = arg(1);
  if (array_key_exists($lng, $languages)) {
    // Add RTL style if the current language's direction is RTL.
    if ($languages[$lng]['direction'] == LANGUAGE_RTL) {
      drupal_add_css(drupal_get_path('module', 'btrClient') . '/btrClient-rtl.css');
    }
  }

  // Disable breadcrumb.
  drupal_set_breadcrumb(array());
}

/**
 * Implements hook_hybridauth_provider_config_alter().
 */
function btrClient_hybridauth_provider_config_alter(&$config, $provider_id) {
  if ($provider_id != 'DrupalOAuth2') {
    return;
  }

  // Get some extra fields from the remote user profile.
  // These fields can be defined by the oauth2 server
  // on hook_oauth2_loginprovider_userprofile_alter().
  $config['profile_fields'] = array(
    /*
    // These are the default profile field mappings.
    'identifier' => 'uid',
    'displayName' => 'name',
    'photoURL' => 'picture.url',
    'email' => 'mail',
    'emailVerified' => 'mail',
    'language' => 'language',
    */
    // Get these extra fields as well.
    'translation_lng' => 'translation_lng',
    'string_order' => 'string_order',
    'preferred_projects' => 'preferred_projects',
    'auxiliary_languages' => 'auxiliary_languages',
    'translations_per_day' => 'translations_per_day',
    'feedback_channels' => 'feedback_channels',
    'permissions' => 'permissions',
  );
}

/**
 * Implements hook_hybridauth_user_login().
 */
function btrClient_hybridauth_user_login($account, $data) {
  $btr_profile = _btrClient_get_user_profile($data);
  $_SESSION['btrClient']['btr_profile'] = $btr_profile;
}

/**
 * Implements hook_user_login().
 */
function btrClient_user_login($account, $data) {
  if (_btrClient_installed_on_server()) {
    btr_get_user_profile();
  }
}

/**
 * Implementation of hook_form_alter().
 */
function btrClient_form_alter(&$form, &$form_state, $form_id) {
  if (_btrClient_installed_on_server())  return;

  if ($form_id == 'user_profile_form') {
    $form['remote_account'] = array(
      '#type' => 'fieldset',
      '#title' => t('Edit the profile on B-Translator Server'),
      '#weight' => -500,
      '#suffix' => '<hr/>',
    );
    $url = variable_get('btrClient_server') . '/user/';
    $form['remote_account']['link_to_btranslator_profile'] = array(
      '#markup' => '<a href="' . $url . '" target="_blank" class="btn">'
      . t('Edit B-Translator Profile') . '</a>',
    );
  }
}

/*
function btr_log($var, $comment ='') {
  $file = '/tmp/btr.log';
  $content = "\n==> $comment: " . print_r($var, true);
  file_put_contents($file, $content, FILE_APPEND);
}
*/